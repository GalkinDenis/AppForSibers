// Generated by Dagger (https://dagger.dev).
package com.denis.appForSibersTeam.network;

import com.denis.appForSibersTeam.viewModels.Model;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_Factory implements Factory<Repository> {
  private final Provider<Model> modelProvider;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public Repository_Factory(Provider<Model> modelProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.modelProvider = modelProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public Repository get() {
    return newInstance(modelProvider.get(), remoteDataSourceProvider.get());
  }

  public static Repository_Factory create(Provider<Model> modelProvider,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new Repository_Factory(modelProvider, remoteDataSourceProvider);
  }

  public static Repository newInstance(Model model, RemoteDataSource remoteDataSource) {
    return new Repository(model, remoteDataSource);
  }
}
