// Generated by view binder compiler. Do not edit!
package com.example.inventory.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.inventory.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DescribePokeLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView ability;

  @NonNull
  public final TextView abilityHead;

  @NonNull
  public final TextView attack;

  @NonNull
  public final TextView attackHead;

  @NonNull
  public final ImageView avatarHead;

  @NonNull
  public final TextView defence;

  @NonNull
  public final TextView defenceHead;

  @NonNull
  public final TextView height;

  @NonNull
  public final TextView heightHead;

  @NonNull
  public final TextView hp;

  @NonNull
  public final TextView hpHead;

  @NonNull
  public final TextView speed;

  @NonNull
  public final TextView speedHead;

  @NonNull
  public final TextView types;

  @NonNull
  public final TextView typesHead;

  @NonNull
  public final TextView weight;

  @NonNull
  public final TextView weightHead;

  private DescribePokeLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull TextView ability,
      @NonNull TextView abilityHead, @NonNull TextView attack, @NonNull TextView attackHead,
      @NonNull ImageView avatarHead, @NonNull TextView defence, @NonNull TextView defenceHead,
      @NonNull TextView height, @NonNull TextView heightHead, @NonNull TextView hp,
      @NonNull TextView hpHead, @NonNull TextView speed, @NonNull TextView speedHead,
      @NonNull TextView types, @NonNull TextView typesHead, @NonNull TextView weight,
      @NonNull TextView weightHead) {
    this.rootView = rootView;
    this.ability = ability;
    this.abilityHead = abilityHead;
    this.attack = attack;
    this.attackHead = attackHead;
    this.avatarHead = avatarHead;
    this.defence = defence;
    this.defenceHead = defenceHead;
    this.height = height;
    this.heightHead = heightHead;
    this.hp = hp;
    this.hpHead = hpHead;
    this.speed = speed;
    this.speedHead = speedHead;
    this.types = types;
    this.typesHead = typesHead;
    this.weight = weight;
    this.weightHead = weightHead;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DescribePokeLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DescribePokeLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.describe_poke_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DescribePokeLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ability;
      TextView ability = rootView.findViewById(id);
      if (ability == null) {
        break missingId;
      }

      id = R.id.ability_head;
      TextView abilityHead = rootView.findViewById(id);
      if (abilityHead == null) {
        break missingId;
      }

      id = R.id.attack;
      TextView attack = rootView.findViewById(id);
      if (attack == null) {
        break missingId;
      }

      id = R.id.attack_head;
      TextView attackHead = rootView.findViewById(id);
      if (attackHead == null) {
        break missingId;
      }

      id = R.id.avatar_head;
      ImageView avatarHead = rootView.findViewById(id);
      if (avatarHead == null) {
        break missingId;
      }

      id = R.id.defence;
      TextView defence = rootView.findViewById(id);
      if (defence == null) {
        break missingId;
      }

      id = R.id.defence_head;
      TextView defenceHead = rootView.findViewById(id);
      if (defenceHead == null) {
        break missingId;
      }

      id = R.id.height;
      TextView height = rootView.findViewById(id);
      if (height == null) {
        break missingId;
      }

      id = R.id.height_head;
      TextView heightHead = rootView.findViewById(id);
      if (heightHead == null) {
        break missingId;
      }

      id = R.id.hp;
      TextView hp = rootView.findViewById(id);
      if (hp == null) {
        break missingId;
      }

      id = R.id.hp_head;
      TextView hpHead = rootView.findViewById(id);
      if (hpHead == null) {
        break missingId;
      }

      id = R.id.speed;
      TextView speed = rootView.findViewById(id);
      if (speed == null) {
        break missingId;
      }

      id = R.id.speed_head;
      TextView speedHead = rootView.findViewById(id);
      if (speedHead == null) {
        break missingId;
      }

      id = R.id.types;
      TextView types = rootView.findViewById(id);
      if (types == null) {
        break missingId;
      }

      id = R.id.types_head;
      TextView typesHead = rootView.findViewById(id);
      if (typesHead == null) {
        break missingId;
      }

      id = R.id.weight;
      TextView weight = rootView.findViewById(id);
      if (weight == null) {
        break missingId;
      }

      id = R.id.weight_head;
      TextView weightHead = rootView.findViewById(id);
      if (weightHead == null) {
        break missingId;
      }

      return new DescribePokeLayoutBinding((ConstraintLayout) rootView, ability, abilityHead,
          attack, attackHead, avatarHead, defence, defenceHead, height, heightHead, hp, hpHead,
          speed, speedHead, types, typesHead, weight, weightHead);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
