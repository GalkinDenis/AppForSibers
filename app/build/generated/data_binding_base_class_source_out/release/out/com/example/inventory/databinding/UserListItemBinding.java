// Generated by view binder compiler. Do not edit!
package com.example.inventory.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.inventory.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView avatarPoke;

  @NonNull
  public final View divider;

  @NonNull
  public final TextView mark;

  @NonNull
  public final TextView pokeAbility;

  @NonNull
  public final TextView pokeAbilityDescribe;

  @NonNull
  public final TextView pokeName;

  @NonNull
  public final TextView pokeNameDescribe;

  private UserListItemBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView avatarPoke,
      @NonNull View divider, @NonNull TextView mark, @NonNull TextView pokeAbility,
      @NonNull TextView pokeAbilityDescribe, @NonNull TextView pokeName,
      @NonNull TextView pokeNameDescribe) {
    this.rootView = rootView;
    this.avatarPoke = avatarPoke;
    this.divider = divider;
    this.mark = mark;
    this.pokeAbility = pokeAbility;
    this.pokeAbilityDescribe = pokeAbilityDescribe;
    this.pokeName = pokeName;
    this.pokeNameDescribe = pokeNameDescribe;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.avatar_poke;
      ImageView avatarPoke = rootView.findViewById(id);
      if (avatarPoke == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = rootView.findViewById(id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.mark;
      TextView mark = rootView.findViewById(id);
      if (mark == null) {
        break missingId;
      }

      id = R.id.poke_ability;
      TextView pokeAbility = rootView.findViewById(id);
      if (pokeAbility == null) {
        break missingId;
      }

      id = R.id.poke_ability_describe;
      TextView pokeAbilityDescribe = rootView.findViewById(id);
      if (pokeAbilityDescribe == null) {
        break missingId;
      }

      id = R.id.poke_name;
      TextView pokeName = rootView.findViewById(id);
      if (pokeName == null) {
        break missingId;
      }

      id = R.id.poke_name_describe;
      TextView pokeNameDescribe = rootView.findViewById(id);
      if (pokeNameDescribe == null) {
        break missingId;
      }

      return new UserListItemBinding((ConstraintLayout) rootView, avatarPoke, divider, mark,
          pokeAbility, pokeAbilityDescribe, pokeName, pokeNameDescribe);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
